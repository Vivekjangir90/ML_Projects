# -*- coding: utf-8 -*-
"""Movie_Recommend_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a--_VXoSP0U2HowBNEmAkUD49VShRh3_
"""

import pandas as pd
import numpy as np

movies = pd.read_csv('https://github.com/Vivekjangir90/ML_Projects/raw/main/Movie_recommendation_system/tmdb_5000_movies.csv')
credits = pd.read_csv('https://github.com/Vivekjangir90/ML_Projects/raw/main/Movie_recommendation_system/tmdb_5000_credits.csv')

movies.info(),credits.info()

merged_data = pd.merge(movies,credits,on='title',how='inner')
merged_data.info()

merged_data.isnull().sum()

# used columns
"""
genres
movie_id
keywords
title
overview
cast
crew

"""

movies = merged_data[['movie_id','title','genres','cast','keywords','overview','crew']]

movies.head(10)

pd.set_option("display.max_rows",20)

movies.isnull().sum()

movies.dropna(inplace=True)

movies.isnull().sum()

movies.duplicated().sum()

movies.iloc[0].genres

# import ast module for convert string of list to list
import ast

def convert(object):
  l=[]
  for i in ast.literal_eval(object):
    l.append(i["name"])
  return l

movies['genres'].apply(convert)

movies['genres']=movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies.head()

def convert_cast(object):
  l = []
  counter =0
  for i in ast.literal_eval(object):
    if counter !=3:
      l.append(i['character'])
      counter +=1
    else:
      break
  return l

movies['cast'] = movies['cast'].apply(convert_cast)

movies.head()

def convert_crew(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i["job"]=="Director":
      l.append(i['name'])
  return l

movies["crew"]=movies["crew"].apply(convert_crew)

movies.head()

movies['overview'][0]

movies['overview'].apply(lambda x:x.split())

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies.head()

movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tags'] = movies['genres'] + movies['cast'] +movies['keywords'] + movies['crew'] + movies['overview']

movies.head()

movies.iloc[0].tags

movie_tags = movies[["movie_id","title","tags"]]

movie_tags

movie_tags["tags"].apply(lambda x:" ".join(x))

movie_tags["tags"]=movie_tags["tags"].apply(lambda x:" ".join(x))

movie_tags.head()

movie_tags["tags"]=movie_tags["tags"].apply(lambda x:x.lower())

movie_tags.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words="english")

vector = cv.fit_transform(movie_tags['tags']).toarray()

vector

featue_names=cv.get_feature_names_out()
featue_names

from sklearn.metrics.pairwise import cosine_similarity

# Assuming 'vector' is your feature vector
cosine_sim = cosine_similarity(vector)

cosine_sim

index = 0
distances = sorted(list(enumerate(cosine_sim[index])),reverse=True,key = lambda x: x[1])

def recommend(movie):
    index = movie_tags[movie_tags['title'] == movie].index[0]
    distances = sorted(list(enumerate(cosine_sim[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:
        print(movie_tags.iloc[i[0]].title)

index = movie_tags[movie_tags['title'] == "Avatar"].index[0]
index

recommend('Ramanujan')

recommend('Gandhi')



